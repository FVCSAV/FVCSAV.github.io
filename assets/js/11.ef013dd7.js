(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{285:function(e,v,r){"use strict";r.r(v);var _=r(14),t=Object(_.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"redis数据库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis数据库"}},[e._v("#")]),e._v(" Redis数据库")]),e._v(" "),v("p",[v("strong",[e._v("灵魂拷问")]),e._v("不是学了MySQL吗，存数据也能存了啊，又学一个数据库干嘛？")]),e._v(" "),v("p",[e._v("在前面我们学习了MySQL数据库，它是一种传统的关系型数据库，我们可以使用MySQL来更好地管理和组织我们的数据，虽然在小型Web应用下，只需要一个MySQL+Mybatis自带的缓存系统就可以胜任大部分的数据存储工作。但是MySQL的缺点也很明显，它的数据始终是存储在硬盘上的，对于我们的用户信息这种不需要经常发生修改的内容，使用MySQL存储确实可以，但是如果是快速更新或是频繁使用的数据，比如微博热搜、双十一秒杀，这些数据不仅要求服务器需要提供更高的响应速度，而且还需要面对短时间内上百万甚至上千万次访问，而MySQL的磁盘IO读写性能完全不能满足上面的需求，能够满足上述需求的只有内存，因为速度远高于磁盘IO。")]),e._v(" "),v("p",[e._v("因此，我们需要寻找一种更好的解决方案，来存储上述这类特殊数据，弥补MySQL的不足，以应对大数据时代的重重考验。")]),e._v(" "),v("h2",{attrs:{id:"nosql概论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nosql概论"}},[e._v("#")]),e._v(" NoSQL概论")]),e._v(" "),v("p",[e._v("NoSQL全称是Not Only SQL（不仅仅是SQL）它是一种非关系型数据库，相比传统SQL关系型数据库，它：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("不保证关系数据的ACID特性")])]),e._v(" "),v("li",[v("p",[e._v("并不遵循SQL标准")])]),e._v(" "),v("li",[v("p",[e._v("消除数据之间关联性")])])]),e._v(" "),v("p",[e._v("乍一看，这玩意不比MySQL垃圾？我们再来看看它的优势：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("远超传统关系型数据库的性能")])]),e._v(" "),v("li",[v("p",[e._v("非常易于扩展")])]),e._v(" "),v("li",[v("p",[e._v("数据模型更加灵活")])]),e._v(" "),v("li",[v("p",[e._v("高可用")])])]),e._v(" "),v("p",[e._v("这样，NoSQL的优势一下就出来了，这不就是我们正要寻找的高并发海量数据的解决方案吗！")]),e._v(" "),v("p",[e._v("NoSQL数据库分为以下几种：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("**键值存储数据库：**所有的数据都是以键值方式存储的，类似于我们之前学过的HashMap，使用起来非常简单方便，性能也非常高。")])]),e._v(" "),v("li",[v("p",[e._v("**列存储数据库：**这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。")])]),e._v(" "),v("li",[v("p",[e._v("**文档型数据库：**它是以一种特定的文档格式存储数据，比如JSON格式，在处理网页等复杂数据时，文档型数据库比传统键值数据库的查询效率更高。")])]),e._v(" "),v("li",[v("p",[e._v("**图形数据库：**利用类似于图的数据结构存储数据，结合图相关算法实现高速访问。")])])]),e._v(" "),v("p",[e._v("其中我们要学习的Redis数据库，就是一个开源的"),v("strong",[e._v("键值存储数据库")]),e._v("，所有的数据全部存放在内存中，它的性能大大高于磁盘IO，并且它也可以支持数据持久化，他还支持横向扩展、主从复制等。")]),e._v(" "),v("p",[e._v("实际生产中，我们一般会配合使用Redis和MySQL以发挥它们各自的优势，取长补短。")]),e._v(" "),v("h2",{attrs:{id:"redis安装和部署"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis安装和部署"}},[e._v("#")]),e._v(" Redis安装和部署")]),e._v(" "),v("p",[e._v("我们这里还是使用Windows安装Redis服务器，但是官方指定是安装到Linux服务器上，我们后面学习了Linux之后，再来安装到Linux服务器上。由于官方并没有提供Windows版本的安装包，我们需要另外寻找：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("官网地址："),v("a",{attrs:{href:"https://redis.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://redis.io"),v("OutboundLink")],1)])]),e._v(" "),v("li",[v("p",[e._v("GitHub Windows版本维护地址："),v("a",{attrs:{href:"https://github.com/tporadowski/redis/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/tporadowski/redis/releases"),v("OutboundLink")],1)])])]),e._v(" "),v("hr"),e._v(" "),v("h2",{attrs:{id:"基本操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[e._v("#")]),e._v(" 基本操作")]),e._v(" "),v("p",[e._v("在我们之前使用MySQL时，我们需要先在数据库中创建一张表，并定义好表的每个字段内容，最后再通过"),v("code",[e._v("insert")]),e._v("语句向表中添加数据，而Redis并不具有MySQL那样的严格的表结构，Redis是一个键值数据库，因此，可以像Map一样的操作方式，通过键值对向Redis数据库中添加数据（操作起来类似于向一个HashMap中存放数据）")]),e._v(" "),v("p",[e._v("在Redis下，数据库是由一个整数索引标识，而不是由一个数据库名称。 默认情况下，我们连接Redis数据库之后，会使用0号数据库，我们可以通过Redis配置文件中的参数来修改数据库总数，默认为16个。")]),e._v(" "),v("p",[e._v("我们可以通过"),v("code",[e._v("select")]),e._v("语句进行切换：")]),e._v(" "),v("p",[e._v("select 序号;")]),e._v(" "),v("h3",{attrs:{id:"数据操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据操作"}},[e._v("#")]),e._v(" 数据操作")]),e._v(" "),v("p",[e._v("我们来看看，如何向Redis数据库中添加数据：")]),e._v(" "),v("p",[e._v("set "),v("key",[v("value",[v("br"),e._v("\n-- 一次性多个"),v("br"),e._v("\nmset ["),v("key",[v("value",[e._v("]...")])],1)],1)],1)],1),e._v(" "),v("p",[e._v("所有存入的数据默认会以"),v("strong",[e._v("字符串")]),e._v("的形式保存，键值具有一定的命名规范，以方便我们可以快速定位我们的数据属于哪一个部分，比如用户的数据：")]),e._v(" "),v("p",[e._v("-- 使用冒号来进行板块分割，比如下面表示用户XXX的信息中的name属性，值为lbw"),v("br"),e._v("\nset user:info:用户ID:name lbw")]),e._v(" "),v("p",[e._v("我们可以通过键值获取存入的值：")]),e._v(" "),v("p",[e._v("get "),v("key")],1),e._v(" "),v("p",[e._v("你以为Redis就仅仅只是存取个数据吗？它还支持数据的过期时间设定：")]),e._v(" "),v("p",[e._v("set "),v("key",[v("value",[e._v(" EX 秒"),v("br"),e._v("\nset "),v("key",[v("value",[e._v(" PX 毫秒")])],1)],1)],1)],1),e._v(" "),v("p",[e._v("当数据到达指定时间时，会被自动删除。我们也可以单独为其他的键值对设置过期时间：")]),e._v(" "),v("p",[e._v("expire "),v("key",[e._v(" 秒")])],1),e._v(" "),v("p",[e._v("通过下面的命令来查询某个键值对的过期时间还剩多少：")]),e._v(" "),v("p",[e._v("ttl "),v("key",[v("br"),e._v("\n-- 毫秒显示"),v("br"),e._v("\npttl "),v("key",[v("br"),e._v("\n-- 转换为永久"),v("br"),e._v("\npersist "),v("key")],1)],1)],1),e._v(" "),v("p",[e._v("那么当我们想直接删除这个数据时呢？直接使用：")]),e._v(" "),v("p",[e._v("del "),v("key",[e._v("...")])],1),e._v(" "),v("p",[e._v("删除命令可以同时拼接多个键值一起删除。")]),e._v(" "),v("p",[e._v("当我们想要查看数据库中所有的键值时：")]),e._v(" "),v("p",[e._v("keys *")]),e._v(" "),v("p",[e._v("也可以查询某个键是否存在：")]),e._v(" "),v("p",[e._v("exists "),v("key",[e._v("...")])],1),e._v(" "),v("p",[e._v("还可以随机拿一个键：")]),e._v(" "),v("p",[e._v("randomkey")]),e._v(" "),v("p",[e._v("我们可以将一个数据库中的内容移动到另一个数据库中：")]),e._v(" "),v("p",[e._v("move "),v("key",[e._v(" 数据库序号")])],1),e._v(" "),v("p",[e._v("修改一个键为另一个键：")]),e._v(" "),v("p",[e._v("rename "),v("key",[e._v(" <新的名称>"),v("br"),e._v("\n-- 下面这个会检查新的名称是否已经存在"),v("br"),e._v("\nrenamex "),v("key",[e._v(" <新的名称>")])],1)],1),e._v(" "),v("p",[e._v("如果存放的数据是一个数字，我们还可以对其进行自增自减操作：")]),e._v(" "),v("p",[e._v("-- 等价于a = a + 1"),v("br"),e._v("\nincr "),v("key",[v("br"),e._v("\n-- 等价于a = a + b"),v("br"),e._v("\nincrby "),v("key",[e._v(" b"),v("br"),e._v("\n-- 等价于a = a - 1"),v("br"),e._v("\ndecr "),v("key")],1)],1)],1),e._v(" "),v("p",[e._v("最后就是查看值的数据类型：")]),e._v(" "),v("p",[e._v("type "),v("key")],1),e._v(" "),v("p",[e._v("Redis数据库也支持多种数据类型，但是它更偏向于我们在Java中认识的那些数据类型。")]),e._v(" "),v("h2",{attrs:{id:"数据类型介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据类型介绍"}},[e._v("#")]),e._v(" 数据类型介绍")]),e._v(" "),v("p",[e._v("一个键值对除了存储一个String类型的值以外，还支持多种常用的数据类型。")]),e._v(" "),v("h3",{attrs:{id:"hash"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[e._v("#")]),e._v(" Hash")]),e._v(" "),v("p",[e._v("这种类型本质上就是一个HashMap，也就是嵌套了一个HashMap罢了，在Java中就像这样：")]),e._v(" "),v("p",[e._v("#Redis默认存String类似于这样："),v("br"),e._v("\nMap<String, String> hash = new HashMap<>();"),v("br"),e._v("\n#Redis存Hash类型的数据类似于这样："),v("br"),e._v("\nMap<String, Map<String, String>> hash = new HashMap<>();")]),e._v(" "),v("p",[e._v("它比较适合存储类这样的数据，由于值本身又是一个Map，因此我们可以在此Map中放入类的各种属性和值，以实现一个Hash数据类型存储一个类的数据。")]),e._v(" "),v("p",[e._v("我们可以像这样来添加一个Hash类型的数据：")]),e._v(" "),v("p",[e._v("hset "),v("key",[e._v(" [<字段> <值>]...")])],1),e._v(" "),v("p",[e._v("我们可以直接获取：")]),e._v(" "),v("p",[e._v("hget "),v("key",[e._v(" <字段>"),v("br"),e._v("\n-- 如果想要一次性获取所有的字段和值"),v("br"),e._v("\nhgetall "),v("key")],1)],1),e._v(" "),v("p",[e._v("同样的，我们也可以判断某个字段是否存在：")]),e._v(" "),v("p",[e._v("hexists "),v("key",[e._v(" <字段>")])],1),e._v(" "),v("p",[e._v("删除Hash中的某个字段：")]),e._v(" "),v("p",[e._v("hdel "),v("key")],1),e._v(" "),v("p",[e._v("我们发现，在操作一个Hash时，实际上就是我们普通操作命令前面添加一个"),v("code",[e._v("h")]),e._v("，这样就能以同样的方式去操作Hash里面存放的键值对了，这里就不一一列出所有的操作了。我们来看看几个比较特殊的。")]),e._v(" "),v("p",[e._v("我们现在想要知道Hash中一共存了多少个键值对：")]),e._v(" "),v("p",[e._v("hlen "),v("key")],1),e._v(" "),v("p",[e._v("我们也可以一次性获取所有字段的值：")]),e._v(" "),v("p",[e._v("hvals "),v("key")],1),e._v(" "),v("p",[e._v("唯一需要注意的是，Hash中只能存放字符串值，不允许出现嵌套的的情况。")]),e._v(" "),v("h3",{attrs:{id:"list"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" List")]),e._v(" "),v("p",[e._v("我们接着来看List类型，实际上这个猜都知道，它就是一个列表，而列表中存放一系列的字符串，它支持随机访问，支持双端操作，就像我们使用Java中的LinkedList一样。")]),e._v(" "),v("p",[e._v("我们可以直接向一个已存在或是不存在的List中添加数据，如果不存在，会自动创建：")]),e._v(" "),v("p",[e._v("-- 向列表头部添加元素"),v("br"),e._v("\nlpush "),v("key",[v("element",[e._v("..."),v("br"),e._v("\n-- 向列表尾部添加元素"),v("br"),e._v("\nrpush "),v("key",[v("element",[e._v("..."),v("br"),e._v("\n-- 在指定元素前面/后面插入元素"),v("br"),e._v("\nlinsert "),v("key",[e._v(" before/after <指定元素> "),v("element")])],1)])],1)])],1),e._v(" "),v("p",[e._v("同样的，获取元素也非常简单：")]),e._v(" "),v("p",[e._v("-- 根据下标获取元素"),v("br"),e._v("\nlindex "),v("key",[e._v(" <下标>"),v("br"),e._v("\n-- 获取并移除头部元素"),v("br"),e._v("\nlpop "),v("key",[v("br"),e._v("\n-- 获取并移除尾部元素"),v("br"),e._v("\nrpop "),v("key",[v("br"),e._v("\n-- 获取指定范围内的"),v("br"),e._v("\nlrange "),v("key",[e._v(" start stop")])],1)],1)],1)],1),e._v(" "),v("p",[e._v("注意下标可以使用负数来表示从后到前数的数字（Python：搁这儿抄呢是吧）:")]),e._v(" "),v("p",[e._v("-- 获取列表a中的全部元素"),v("br"),e._v("\nlrange a 0 -1")]),e._v(" "),v("p",[e._v("没想到吧，push和pop还能连着用呢：")]),e._v(" "),v("p",[e._v("-- 从前一个数组的最后取一个数出来放到另一个数组的头部，并返回元素"),v("br"),e._v("\nrpoplpush 当前数组 目标数组")]),e._v(" "),v("p",[e._v("它还支持阻塞操作，类似于生产者和消费者，比如我们想要等待列表中有了数据后再进行pop操作：")]),e._v(" "),v("p",[e._v("-- 如果列表中没有元素，那么就等待，如果指定时间（秒）内被添加了数据，那么就执行pop操作，如果超时就作废，支持同时等待多个列表，只要其中一个列表有元素了，那么就能执行"),v("br"),e._v("\nblpop "),v("key",[e._v("... timeout")])],1),e._v(" "),v("h3",{attrs:{id:"set和sortedset"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set和sortedset"}},[e._v("#")]),e._v(" Set和SortedSet")]),e._v(" "),v("p",[e._v("Set集合其实就像Java中的HashSet一样（我们在JavaSE中已经讲解过了，HashSet本质上就是利用了一个HashMap，但是Value都是固定对象，仅仅是Key不同）它不允许出现重复元素，不支持随机访问，但是能够利用Hash表提供极高的查找效率。")]),e._v(" "),v("p",[e._v("向Set中添加一个或多个值：")]),e._v(" "),v("p",[e._v("sadd "),v("key",[v("value",[e._v("...")])],1)],1),e._v(" "),v("p",[e._v("查看Set集合中有多少个值：")]),e._v(" "),v("p",[e._v("scard "),v("key")],1),e._v(" "),v("p",[e._v("判断集合中是否包含：")]),e._v(" "),v("p",[e._v("-- 是否包含指定值"),v("br"),e._v("\nsismember "),v("key",[v("value",[v("br"),e._v("\n-- 列出所有值"),v("br"),e._v("\nsmembers "),v("key")],1)],1)],1),e._v(" "),v("p",[e._v("集合之间的运算：")]),e._v(" "),v("p",[e._v("-- 集合之间的差集"),v("br"),e._v("\nsdiff "),v("key1",[v("key2",[v("br"),e._v("\n-- 集合之间的交集"),v("br"),e._v("\nsinter "),v("key1",[v("key2",[v("br"),e._v("\n-- 求并集"),v("br"),e._v("\nsunion "),v("key1",[v("key2",[v("br"),e._v("\n-- 将集合之间的差集存到目标集合中"),v("br"),e._v("\nsdiffstore 目标 "),v("key1",[v("key2",[v("br"),e._v("\n-- 同上"),v("br"),e._v("\nsinterstore 目标 "),v("key1",[v("key2",[v("br"),e._v("\n-- 同上"),v("br"),e._v("\nsunionstore 目标 "),v("key1",[v("key2")],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),v("p",[e._v("移动指定值到另一个集合中：")]),e._v(" "),v("p",[e._v("smove "),v("key",[e._v(" 目标 value")])],1),e._v(" "),v("p",[e._v("移除操作：")]),e._v(" "),v("p",[e._v("-- 随机移除一个幸运儿"),v("br"),e._v("\nspop "),v("key",[v("br"),e._v("\n-- 移除指定"),v("br"),e._v("\nsrem "),v("key",[v("value",[e._v("...")])],1)],1)],1),e._v(" "),v("p",[e._v("那么如果我们要求Set集合中的数据按照我们指定的顺序进行排列怎么办呢？这时就可以使用SortedSet，它支持我们为每个值设定一个分数，分数的大小决定了值的位置，所以它是有序的。")]),e._v(" "),v("p",[e._v("我们可以添加一个带分数的值：")]),e._v(" "),v("p",[e._v("zadd "),v("key",[e._v(" ["),v("value",[v("score",[e._v("]...")])],1)],1)],1),e._v(" "),v("p",[e._v("同样的：")]),e._v(" "),v("p",[e._v("-- 查询有多少个值"),v("br"),e._v("\nzcard "),v("key",[v("br"),e._v("\n-- 移除"),v("br"),e._v("\nzrem "),v("key",[v("value",[e._v("..."),v("br"),e._v("\n-- 获取区间内的所有"),v("br"),e._v("\nzrange "),v("key",[e._v(" start stop")])],1)],1)],1)],1),e._v(" "),v("p",[e._v("由于所有的值都有一个分数，我们也可以根据分数段来获取：")]),e._v(" "),v("p",[e._v("-- 通过分数段查看"),v("br"),e._v("\nzrangebyscore "),v("key",[e._v(" start stop [withscores] [limit]"),v("br"),e._v("\n-- 统计分数段内的数量"),v("br"),e._v("\nzcount "),v("key",[e._v("  start stop"),v("br"),e._v("\n-- 根据分数获取指定值的排名"),v("br"),e._v("\nzrank "),v("key",[v("value")],1)],1)],1)],1),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.jianshu.com/p/32b9fe8c20e1",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.jianshu.com/p/32b9fe8c20e1"),v("OutboundLink")],1)]),e._v(" "),v("p",[e._v("有关Bitmap、HyperLogLog和Geospatial等数据类型，这里暂时不做介绍，感兴趣可以自行了解。")]),e._v(" "),v("hr"),e._v(" "),v("h2",{attrs:{id:"持久化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#持久化"}},[e._v("#")]),e._v(" 持久化")]),e._v(" "),v("p",[e._v("我们知道，Redis数据库中的数据都是存放在内存中，虽然很高效，但是这样存在一个非常严重的问题，如果突然停电，那我们的数据不就全部丢失了吗？它不像硬盘上的数据，断电依然能够保存。")]),e._v(" "),v("p",[e._v("这个时候我们就需要持久化，我们需要将我们的数据备份到硬盘上，防止断电或是机器故障导致的数据丢失。")]),e._v(" "),v("p",[e._v("持久化的实现方式有两种方案：一种是直接保存当前"),v("strong",[e._v("已经存储的数据")]),e._v("，相当于复制内存中的数据到硬盘上，需要恢复数据时直接读取即可；还有一种就是保存我们存放数据的"),v("strong",[e._v("所有过程")]),e._v("，需要恢复数据时，只需要将整个过程完整地重演一遍就能保证与之前数据库中的内容一致。")]),e._v(" "),v("h3",{attrs:{id:"rdb"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rdb"}},[e._v("#")]),e._v(" RDB")]),e._v(" "),v("p",[e._v("RDB就是我们所说的第一种解决方案，那么如何将数据保存到本地呢？我们可以使用命令：")]),e._v(" "),v("p",[e._v("save"),v("br"),e._v("\n-- 注意上面这个命令是直接保存，会占用一定的时间，也可以单独开一个子进程后台执行保存"),v("br"),e._v("\nbgsave")]),e._v(" "),v("p",[e._v("执行后，会在服务端目录下生成一个dump.rdb文件，而这个文件中就保存了内存中存放的数据，当服务器重启后，会自动加载里面的内容到对应数据库中。保存后我们可以关闭服务器：")]),e._v(" "),v("p",[e._v("shutdown")]),e._v(" "),v("p",[e._v("重启后可以看到数据依然存在。")]),e._v(" "),v("p",[e._v("虽然这种方式非常方便，但是由于会完整复制所有的数据，如果数据库中的数据量比较大，那么复制一次可能就需要花费大量的时间，所以我们可以每隔一段时间自动进行保存；还有就是，如果我们基本上都是在进行读操作，而没有进行写操作，实际上只需要偶尔保存一次即可，因为数据几乎没有怎么变化，可能两次保存的都是一样的数据。")]),e._v(" "),v("p",[e._v("我们可以在配置文件中设置自动保存，并设定在一段时间内写入多少数据时，执行一次保存操作：")]),e._v(" "),v("p",[e._v("save 300 10 # 300秒（5分钟）内有10个写入"),v("br"),e._v("\nsave 60 10000 # 60秒（1分钟）内有10000个写入")]),e._v(" "),v("p",[e._v("配置的save使用的都是bgsave后台执行。")]),e._v(" "),v("h3",{attrs:{id:"aof"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[e._v("#")]),e._v(" AOF")]),e._v(" "),v("p",[e._v("虽然RDB能够很好地解决数据持久化问题，但是它的缺点也很明显：每次都需要去完整地保存整个数据库中的数据，同时后台保存过程中也会产生额外的内存开销，最严重的是它并不是实时保存的，如果在自动保存触发之前服务器崩溃，那么依然会导致少量数据的丢失。")]),e._v(" "),v("p",[e._v("而AOF就是另一种方式，它会以日志的形式将我们每次执行的命令都进行保存，服务器重启时会将所有命令依次执行，通过这种重演的方式将数据恢复，这样就能很好解决实时性存储问题。")]),e._v(" "),v("p",[e._v("但是，我们多久写一次日志呢？我们可以自己配置保存策略，有三种策略：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("always：每次执行写操作都会保存一次")])]),e._v(" "),v("li",[v("p",[e._v("everysec：每秒保存一次（默认配置），这样就算丢失数据也只会丢一秒以内的数据")])]),e._v(" "),v("li",[v("p",[e._v("no：看系统心情保存")])])]),e._v(" "),v("p",[e._v("可以在配置文件中配置：")]),e._v(" "),v("h1",{attrs:{id:"注意得改成也是"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注意得改成也是"}},[e._v("#")]),e._v(" 注意得改成也是")]),e._v(" "),v("p",[e._v("appendonly yes"),v("br"),e._v("\n​")]),e._v(" "),v("h1",{attrs:{id:"appendfsync-always"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#appendfsync-always"}},[e._v("#")]),e._v(" appendfsync always")]),e._v(" "),v("p",[e._v("appendfsync everysec")]),e._v(" "),v("h1",{attrs:{id:"appendfsync-no"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#appendfsync-no"}},[e._v("#")]),e._v(" appendfsync no")]),e._v(" "),v("p",[e._v("重启服务器后，可以看到服务器目录下多了一个"),v("code",[e._v("appendonly.aof")]),e._v("文件，存储的就是我们执行的命令。")]),e._v(" "),v("p",[e._v("AOF的缺点也很明显，每次服务器启动都需要进行过程重演，相比RDB更加耗费时间，并且随着我们的操作变多，不断累计，可能到最后我们的aof文件会变得无比巨大，我们需要一个改进方案来优化这些问题。")]),e._v(" "),v("p",[e._v("Redis有一个AOF重写机制进行优化，比如我们执行了这样的语句：")]),e._v(" "),v("p",[e._v("lpush test 666"),v("br"),e._v("\nlpush test 777"),v("br"),e._v("\nlpush test 888")]),e._v(" "),v("p",[e._v("实际上用一条语句也可以实现：")]),e._v(" "),v("p",[e._v("lpush test 666 777 888")]),e._v(" "),v("p",[e._v("正是如此，只要我们能够保证最终的重演结果和原有语句的结果一致，无论语句如何修改都可以，所以我们可以通过这种方式将多条语句进行压缩。")]),e._v(" "),v("p",[e._v("我们可以输入命令来手动执行重写操作：")]),e._v(" "),v("p",[e._v("bgrewriteaof")]),e._v(" "),v("p",[e._v("或是在配置文件中配置自动重写：")]),e._v(" "),v("h1",{attrs:{id:"百分比计算-这里不多介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#百分比计算-这里不多介绍"}},[e._v("#")]),e._v(" 百分比计算，这里不多介绍")]),e._v(" "),v("p",[e._v("auto-aof-rewrite-percentage 100")]),e._v(" "),v("h1",{attrs:{id:"当达到这个大小时-触发自动重写"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#当达到这个大小时-触发自动重写"}},[e._v("#")]),e._v(" 当达到这个大小时，触发自动重写")]),e._v(" "),v("p",[e._v("auto-aof-rewrite-min-size 64mb")]),e._v(" "),v("p",[e._v("至此，我们就完成了两种持久化方案的介绍，最后我们再来进行一下总结：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("AOF：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("优点：存储速度快、消耗资源少、支持实时存储")])]),e._v(" "),v("li",[v("p",[e._v("缺点：加载速度慢、数据体积大")])])])]),e._v(" "),v("li",[v("p",[e._v("RDB：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("优点：加载速度快、数据体积小")])]),e._v(" "),v("li",[v("p",[e._v("缺点：存储速度慢大量消耗资源、会发生数据丢失")])])])])]),e._v(" "),v("hr"),e._v(" "),v("h2",{attrs:{id:"事务和锁机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务和锁机制"}},[e._v("#")]),e._v(" 事务和锁机制")]),e._v(" "),v("p",[e._v("和MySQL一样，在Redis中也有事务机制，当我们需要保证多条命令一次性完整执行而中途不受到其他命令干扰时，就可以使用事务机制。")]),e._v(" "),v("p",[e._v("我们可以使用命令来直接开启事务：")]),e._v(" "),v("p",[e._v("multi")]),e._v(" "),v("p",[e._v("当我们输入完所有要执行的命令时，可以使用命令来立即执行事务：")]),e._v(" "),v("p",[e._v("exec")]),e._v(" "),v("p",[e._v("我们也可以中途取消事务：")]),e._v(" "),v("p",[e._v("discard")]),e._v(" "),v("p",[e._v("实际上整个事务是创建了一个命令队列，它不像MySQL那种在事务中也能单独得到结果，而是我们提前将所有的命令装在队列中，但是并不会执行，而是等我们提交事务的时候再统一执行。")]),e._v(" "),v("h3",{attrs:{id:"锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[e._v("#")]),e._v(" 锁")]),e._v(" "),v("p",[e._v("又提到锁了，实际上这个概念对我们来说已经不算是陌生了。实际上在Redis中也会出现多个命令同时竞争同一个数据的情况，比如现在有两条命令同时执行，他们都要去修改a的值，那么这个时候就只能动用锁机制来保证同一时间只能有一个命令操作。")]),e._v(" "),v("p",[e._v("虽然Redis中也有锁机制，但是它是一种乐观锁，不同于MySQL，我们在MySQL中认识的锁是悲观锁，那么什么是乐观锁什么是悲观锁呢？")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("悲观锁：时刻认为别人会来抢占资源，禁止一切外来访问，直到释放锁，具有强烈的排他性质。")])]),e._v(" "),v("li",[v("p",[e._v("乐观锁：并不认为会有人来抢占资源，所以会直接对数据进行操作，在操作时再去验证是否有其他人抢占资源。")])])]),e._v(" "),v("p",[e._v("Redis中可以使用watch来监视一个目标，如果执行事务之前被监视目标发生了修改，则取消本次事务：")]),e._v(" "),v("p",[e._v("watch")]),e._v(" "),v("p",[e._v("我们可以开两个客户端进行测试。")]),e._v(" "),v("p",[e._v("取消监视可以使用：")]),e._v(" "),v("p",[e._v("unwatch")]),e._v(" "),v("p",[e._v("至此，Redis的基础内容就讲解完毕了，在之后的SpringCloud阶段，我们还会去讲解集群相关的知识，包括主从复制、哨兵模式等。")]),e._v(" "),v("hr"),e._v(" "),v("h2",{attrs:{id:"使用java与redis交互"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用java与redis交互"}},[e._v("#")]),e._v(" 使用Java与Redis交互")]),e._v(" "),v("p",[e._v("既然了解了如何通过命令窗口操作Redis数据库，那么我们如何使用Java来操作呢？")]),e._v(" "),v("p",[e._v("这里我们需要使用到Jedis框架，它能够实现Java与Redis数据库的交互，依赖：")]),e._v(" "),v("dependencies",[v("dependency",[v("groupId",[e._v("redis.clients")]),e._v(" "),v("artifactId",[e._v("jedis")]),e._v(" "),v("version",[e._v("4.0.0")])],1)],1),e._v(" "),v("h3",{attrs:{id:"基本操作-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本操作-2"}},[e._v("#")]),e._v(" 基本操作")]),e._v(" "),v("p",[e._v("我们来看看如何连接Redis数据库，非常简单，只需要创建一个对象即可：")]),e._v(" "),v("p",[e._v("public static void main(String[] args) {"),v("br"),e._v("\n   //创建Jedis对象"),v("br"),e._v('\n   Jedis jedis = new Jedis("localhost", 6379);')]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[e._v("//使用之后关闭连接  \njedis.close();  \n")])])]),v("p",[e._v("}")]),e._v(" "),v("p",[e._v("通过Jedis对象，我们就可以直接调用命令的同名方法来执行Redis命令了，比如：")]),e._v(" "),v("p",[e._v("public static void main(String[] args) {"),v("br"),e._v("\n   //直接使用try-with-resouse，省去close"),v("br"),e._v('\n   try(Jedis jedis = new Jedis("192.168.10.3", 6379)){'),v("br"),e._v('\n       jedis.set("test", "lbwnb");   //等同于 set test lbwnb 命令'),v("br"),e._v('\n       System.out.println(jedis.get("test"));  //等同于 get test 命令'),v("br"),e._v("\n   }"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("Hash类型的数据也是这样：")]),e._v(" "),v("p",[e._v("public static void main(String[] args) {"),v("br"),e._v('\n   try(Jedis jedis = new Jedis("192.168.10.3", 6379)){'),v("br"),e._v('\n       jedis.hset("hhh", "name", "sxc");   //等同于 hset hhh name sxc'),v("br"),e._v('\n       jedis.hset("hhh", "sex", "19");    //等同于 hset hhh age 19'),v("br"),e._v('\n       jedis.hgetAll("hhh").forEach((k, v) -> System.out.println(k+": "+v));'),v("br"),e._v("\n   }"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("我们接着来看看列表操作：")]),e._v(" "),v("p",[e._v("public static void main(String[] args) {"),v("br"),e._v('\n   try(Jedis jedis = new Jedis("192.168.10.3", 6379)){'),v("br"),e._v('\n       jedis.lpush("mylist", "111", "222", "333");  //等同于 lpush mylist 111 222 333 命令'),v("br"),e._v('\n       jedis.lrange("mylist", 0, -1)'),v("br"),e._v("\n               .forEach(System.out::println);    //等同于 lrange mylist 0 -1"),v("br"),e._v("\n   }"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("实际上我们只需要按照对应的操作去调用同名方法即可，所有的类型封装Jedis已经帮助我们完成了。")]),e._v(" "),v("h3",{attrs:{id:"springboot整合redis"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springboot整合redis"}},[e._v("#")]),e._v(" SpringBoot整合Redis")]),e._v(" "),v("p",[e._v("我们接着来看如何在SpringBoot项目中整合Redis操作框架，只需要一个starter即可，但是它底层没有用Jedis，而是Lettuce：")]),e._v(" "),v("dependency",[v("groupId",[e._v("org.springframework.boot")]),e._v(" "),v("artifactId",[e._v("spring-boot-starter-data-redis")])],1),e._v(" "),v("p",[e._v("starter提供的默认配置会去连接本地的Redis服务器，并使用0号数据库，当然你也可以手动进行修改：")]),e._v(" "),v("p",[e._v("spring:"),v("br"),e._v("\nredis:"),v("br"),e._v("\n#Redis服务器地址"),v("br"),e._v("\n   host: 192.168.10.3"),v("br"),e._v("\n   #端口"),v("br"),e._v("\n   port: 6379"),v("br"),e._v("\n   #使用几号数据库"),v("br"),e._v("\n   database: 0")]),e._v(" "),v("p",[e._v("starter已经给我们提供了两个默认的模板类：")]),e._v(" "),v("p",[e._v("@Configuration("),v("br"),e._v("\n   proxyBeanMethods = false"),v("br"),e._v("\n)"),v("br"),e._v("\n@ConditionalOnClass({RedisOperations.class})"),v("br"),e._v("\n@EnableConfigurationProperties({RedisProperties.class})"),v("br"),e._v("\n@Import({LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class})"),v("br"),e._v("\npublic class RedisAutoConfiguration {"),v("br"),e._v("\n   public RedisAutoConfiguration() {"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Bean"),v("br"),e._v("\n   @ConditionalOnMissingBean("),v("br"),e._v('\n       name = {"redisTemplate"}'),v("br"),e._v("\n   )"),v("br"),e._v("\n   @ConditionalOnSingleCandidate(RedisConnectionFactory.class)"),v("br"),e._v("\n   public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {"),v("br"),e._v("\n       RedisTemplate<Object, Object> template = new RedisTemplate();"),v("br"),e._v("\n       template.setConnectionFactory(redisConnectionFactory);"),v("br"),e._v("\n       return template;"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Bean"),v("br"),e._v("\n   @ConditionalOnMissingBean"),v("br"),e._v("\n   @ConditionalOnSingleCandidate(RedisConnectionFactory.class)"),v("br"),e._v("\n   public StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) {"),v("br"),e._v("\n       return new StringRedisTemplate(redisConnectionFactory);"),v("br"),e._v("\n   }"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("那么如何去使用这两个模板类呢？我们可以直接注入"),v("code",[e._v("StringRedisTemplate")]),e._v("来使用模板：")]),e._v(" "),v("p",[e._v("@SpringBootTest"),v("br"),e._v("\nclass SpringBootTestApplicationTests {"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Autowired"),v("br"),e._v("\n   StringRedisTemplate template;"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Test"),v("br"),e._v("\n   void contextLoads() {"),v("br"),e._v("\n       ValueOperations<String, String> operations = template.opsForValue();"),v("br"),e._v('\n       operations.set("c", "xxxxx");   //设置值'),v("br"),e._v('\n       System.out.println(operations.get("c"));   //获取值'),v("br"),e._v(" "),v("br"),e._v('\n       template.delete("c");    //删除键'),v("br"),e._v('\n       System.out.println(template.hasKey("c"));   //判断是否包含键'),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("实际上所有的值的操作都被封装到了"),v("code",[e._v("ValueOperations")]),e._v("对象中，而普通的键操作直接通过模板对象就可以使用了，大致使用方式其实和Jedis一致。")]),e._v(" "),v("p",[e._v("我们接着来看看事务操作，由于Spring没有专门的Redis事务管理器，所以只能借用JDBC提供的，只不过无所谓，正常情况下反正我们也要用到这玩意：")]),e._v(" "),v("dependency",[v("groupId",[e._v("org.springframework.boot")]),e._v(" "),v("artifactId",[e._v("spring-boot-starter-jdbc")])],1),e._v(" "),v("dependency",[v("groupId",[e._v("mysql")]),e._v(" "),v("artifactId",[e._v("mysql-connector-java")])],1),e._v(" "),v("p",[e._v("@Service"),v("br"),e._v("\npublic class RedisService {"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Resource"),v("br"),e._v("\n   StringRedisTemplate template;"),v("br"),e._v("\n​"),v("br"),e._v("\n   @PostConstruct"),v("br"),e._v("\n   public void init(){"),v("br"),e._v("\n       template.setEnableTransactionSupport(true);   //需要开启事务"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Transactional    //需要添加此注解"),v("br"),e._v("\n   public void test(){"),v("br"),e._v("\n       template.multi();"),v("br"),e._v('\n       template.opsForValue().set("d", "xxxxx");'),v("br"),e._v("\n       template.exec();"),v("br"),e._v("\n   }"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("我们还可以为RedisTemplate对象配置一个Serializer来实现对象的JSON存储：")]),e._v(" "),v("p",[e._v("@Test"),v("br"),e._v("\nvoid contextLoad2() {"),v("br"),e._v("\n   //注意Student需要实现序列化接口才能存入Redis"),v("br"),e._v('\n   template.opsForValue().set("student", new Student());'),v("br"),e._v('\n   System.out.println(template.opsForValue().get("student"));'),v("br"),e._v("\n}")]),e._v(" "),v("hr"),e._v(" "),v("h2",{attrs:{id:"使用redis做缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用redis做缓存"}},[e._v("#")]),e._v(" 使用Redis做缓存")]),e._v(" "),v("p",[e._v("我们可以轻松地使用Redis来实现一些框架的缓存和其他存储。")]),e._v(" "),v("h3",{attrs:{id:"mybatis二级缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mybatis二级缓存"}},[e._v("#")]),e._v(" Mybatis二级缓存")]),e._v(" "),v("p",[e._v("还记得我们在学习Mybatis讲解的缓存机制吗，我们当时介绍了二级缓存，它是Mapper级别的缓存，能够作用与所有会话。但是当时我们提出了一个问题，由于Mybatis的默认二级缓存只能是单机的，如果存在多台服务器访问同一个数据库，实际上二级缓存只会在各自的服务器上生效，但是我们希望的是多台服务器都能使用同一个二级缓存，这样就不会造成过多的资源浪费。")]),e._v(" "),v("p",[e._v("我们可以将Redis作为Mybatis的二级缓存，这样就能实现多台服务器使用同一个二级缓存，因为它们只需要连接同一个Redis服务器即可，所有的缓存数据全部存储在Redis服务器上。我们需要手动实现Mybatis提供的Cache接口，这里我们简单编写一下：")]),e._v(" "),v("p",[e._v("//实现Mybatis的Cache接口"),v("br"),e._v("\npublic class RedisMybatisCache implements Cache {"),v("br"),e._v("\n​"),v("br"),e._v("\n   private final String id;"),v("br"),e._v("\n   private static RedisTemplate<Object, Object> template;"),v("br"),e._v("\n​"),v("br"),e._v("\n   //注意构造方法必须带一个String类型的参数接收id"),v("br"),e._v("\n   public RedisMybatisCache(String id){"),v("br"),e._v("\n       this.id = id;"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n//初始化时通过配置类将RedisTemplate给过来"),v("br"),e._v("\n   public static void setTemplate(RedisTemplate<Object, Object> template) {"),v("br"),e._v("\n       RedisMybatisCache.template = template;"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public String getId() {"),v("br"),e._v("\n       return id;"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public void putObject(Object o, Object o1) {"),v("br"),e._v("\n       //这里直接向Redis数据库中丢数据即可，o就是Key，o1就是Value，60秒为过期时间"),v("br"),e._v("\n       template.opsForValue().set(o, o1, 60, TimeUnit.SECONDS);"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public Object getObject(Object o) {"),v("br"),e._v("\n       //这里根据Key直接从Redis数据库中获取值即可"),v("br"),e._v("\n       return template.opsForValue().get(o);"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public Object removeObject(Object o) {"),v("br"),e._v("\n       //根据Key删除"),v("br"),e._v("\n       return template.delete(o);"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public void clear() {"),v("br"),e._v("\n       //由于template中没封装清除操作，只能通过connection来执行"),v("br"),e._v("\ntemplate.execute((RedisCallback"),v("Void",[e._v(") connection -> {"),v("br"),e._v("\n           //通过connection对象执行清空操作"),v("br"),e._v("\n           connection.flushDb();"),v("br"),e._v("\n           return null;"),v("br"),e._v("\n       });"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public int getSize() {"),v("br"),e._v("\n       //这里也是使用connection对象来获取当前的Key数量"),v("br"),e._v("\n       return template.execute(RedisServerCommands::dbSize).intValue();"),v("br"),e._v("\n   }"),v("br"),e._v("\n}")])],1),e._v(" "),v("p",[e._v("缓存类编写完成后，我们接着来编写配置类：")]),e._v(" "),v("p",[e._v("@Configuration"),v("br"),e._v("\npublic class MainConfiguration {"),v("br"),e._v("\n   @Resource"),v("br"),e._v("\n   RedisTemplate<Object, Object> template;"),v("br"),e._v("\n​"),v("br"),e._v("\n   @PostConstruct"),v("br"),e._v("\n   public void init(){"),v("br"),e._v("\n       //把RedisTemplate给到RedisMybatisCache"),v("br"),e._v("\n       RedisMybatisCache.setTemplate(template);"),v("br"),e._v("\n   }"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("最后我们在Mapper上启用此缓存即可：")]),e._v(" "),v("p",[e._v("//只需要修改缓存实现类implementation为我们的RedisMybatisCache即可"),v("br"),e._v("\n@CacheNamespace(implementation = RedisMybatisCache.class)"),v("br"),e._v("\n@Mapper"),v("br"),e._v("\npublic interface MainMapper {"),v("br"),e._v("\n​"),v("br"),e._v('\n   @Select("select name from student where sid = 1")'),v("br"),e._v("\n   String getSid();"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("最后我们提供一个测试用例来查看当前的二级缓存是否生效：")]),e._v(" "),v("p",[e._v("@SpringBootTest"),v("br"),e._v("\nclass SpringBootTestApplicationTests {"),v("br"),e._v("\n​"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Resource"),v("br"),e._v("\n   MainMapper mapper;"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Test"),v("br"),e._v("\n   void contextLoads() {"),v("br"),e._v("\n       System.out.println(mapper.getSid());"),v("br"),e._v("\n       System.out.println(mapper.getSid());"),v("br"),e._v("\n       System.out.println(mapper.getSid());"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("手动使用客户端查看Redis数据库，可以看到已经有一条Mybatis生成的缓存数据了。")]),e._v(" "),v("h3",{attrs:{id:"token持久化存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#token持久化存储"}},[e._v("#")]),e._v(" Token持久化存储")]),e._v(" "),v("p",[e._v("我们之前使用SpringSecurity时，remember-me的Token是支持持久化存储的，而我们当时是存储在数据库中，那么Token信息能否存储在缓存中呢，当然也是可以的，我们可以手动实现一个：")]),e._v(" "),v("p",[e._v("//实现PersistentTokenRepository接口"),v("br"),e._v("\n@Component"),v("br"),e._v("\npublic class RedisTokenRepository implements PersistentTokenRepository {"),v("br"),e._v("\n//Key名称前缀，用于区分"),v("br"),e._v('\n   private final static String REMEMBER_ME_KEY = "spring:security:rememberMe:";'),v("br"),e._v("\n   @Resource"),v("br"),e._v("\n   RedisTemplate<Object, Object> template;"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public void createNewToken(PersistentRememberMeToken token) {"),v("br"),e._v("\n       //这里要放两个，一个存seriesId->Token，一个存username->seriesId，因为删除时是通过username删除"),v("br"),e._v('\n       template.opsForValue().set(REMEMBER_ME_KEY+"username:"+token.getUsername(), token.getSeries());'),v("br"),e._v('\n       template.expire(REMEMBER_ME_KEY+"username:"+token.getUsername(), 1, TimeUnit.DAYS);'),v("br"),e._v("\n       this.setToken(token);"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n//先获取，然后修改创建一个新的，再放入"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public void updateToken(String series, String tokenValue, Date lastUsed) {"),v("br"),e._v("\n       PersistentRememberMeToken token = this.getToken(series);"),v("br"),e._v("\n       if(token != null)"),v("br"),e._v("\n          this.setToken(new PersistentRememberMeToken(token.getUsername(), series, tokenValue, lastUsed));"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public PersistentRememberMeToken getTokenForSeries(String seriesId) {"),v("br"),e._v("\n       return this.getToken(seriesId);"),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n//通过username找seriesId直接删除这两个"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public void removeUserTokens(String username) {"),v("br"),e._v('\n       String series = (String) template.opsForValue().get(REMEMBER_ME_KEY+"username:"+username);'),v("br"),e._v("\n       template.delete(REMEMBER_ME_KEY+series);"),v("br"),e._v('\n       template.delete(REMEMBER_ME_KEY+"username:"+username);'),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v(" "),v("br"),e._v("\n//由于PersistentRememberMeToken没实现序列化接口，这里只能用Hash来存储了，所以单独编写一个set和get操作"),v("br"),e._v("\n   private PersistentRememberMeToken getToken(String series){"),v("br"),e._v("\n       Map<Object, Object> map = template.opsForHash().entries(REMEMBER_ME_KEY+series);"),v("br"),e._v("\n       if(map.isEmpty()) return null;"),v("br"),e._v("\n       return new PersistentRememberMeToken("),v("br"),e._v('\n               (String) map.get("username"),'),v("br"),e._v('\n               (String) map.get("series"),'),v("br"),e._v('\n               (String) map.get("tokenValue"),'),v("br"),e._v('\n               new Date(Long.parseLong((String) map.get("date"))));'),v("br"),e._v("\n   }"),v("br"),e._v("\n​"),v("br"),e._v("\n   private void setToken(PersistentRememberMeToken token){"),v("br"),e._v("\n       Map<String, String> map = new HashMap<>();"),v("br"),e._v('\n       map.put("username", token.getUsername());'),v("br"),e._v('\n       map.put("series", token.getSeries());'),v("br"),e._v('\n       map.put("tokenValue", token.getTokenValue());'),v("br"),e._v('\n       map.put("date", ""+token.getDate().getTime());'),v("br"),e._v("\n       template.opsForHash().putAll(REMEMBER_ME_KEY+token.getSeries(), map);"),v("br"),e._v("\n       template.expire(REMEMBER_ME_KEY+token.getSeries(), 1, TimeUnit.DAYS);"),v("br"),e._v("\n   }"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("接着把验证Service实现了：")]),e._v(" "),v("p",[e._v("@Service"),v("br"),e._v("\npublic class AuthService implements UserDetailsService {"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Resource"),v("br"),e._v("\n   UserMapper mapper;"),v("br"),e._v("\n​"),v("br"),e._v("\n   @Override"),v("br"),e._v("\n   public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {"),v("br"),e._v("\n       Account account = mapper.getAccountByUsername(username);"),v("br"),e._v('\n       if(account == null) throw new UsernameNotFoundException("");'),v("br"),e._v("\n       return User"),v("br"),e._v("\n               .withUsername(username)"),v("br"),e._v("\n               .password(account.getPassword())"),v("br"),e._v("\n               .roles(account.getRole())"),v("br"),e._v("\n               .build();"),v("br"),e._v("\n   }"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("Mapper也安排上：")]),e._v(" "),v("p",[e._v("@Data"),v("br"),e._v("\npublic class Account implements Serializable {"),v("br"),e._v("\n   int id;"),v("br"),e._v("\n   String username;"),v("br"),e._v("\n   String password;"),v("br"),e._v("\n   String role;"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("@CacheNamespace(implementation = MybatisRedisCache.class)"),v("br"),e._v("\n@Mapper"),v("br"),e._v("\npublic interface UserMapper {"),v("br"),e._v("\n​"),v("br"),e._v('\n   @Select("select * from users where username = #{username}")'),v("br"),e._v("\n   Account getAccountByUsername(String username);"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("最后配置文件配一波：")]),e._v(" "),v("p",[e._v("@Override"),v("br"),e._v("\nprotected void configure(HttpSecurity http) throws Exception {"),v("br"),e._v("\n   http"),v("br"),e._v("\n           .authorizeRequests()"),v("br"),e._v("\n           .anyRequest().authenticated()"),v("br"),e._v("\n           .and()"),v("br"),e._v("\n           .formLogin()"),v("br"),e._v("\n           .and()"),v("br"),e._v("\n           .rememberMe()"),v("br"),e._v("\n           .tokenRepository(repository);"),v("br"),e._v("\n}"),v("br"),e._v("\n​"),v("br"),e._v("\n@Override"),v("br"),e._v("\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {"),v("br"),e._v("\n   auth"),v("br"),e._v("\n           .userDetailsService(service)"),v("br"),e._v("\n           .passwordEncoder(new BCryptPasswordEncoder());"),v("br"),e._v("\n}")]),e._v(" "),v("p",[e._v("OK，启动服务器验证一下吧。")]),e._v(" "),v("hr"),e._v(" "),v("h2",{attrs:{id:"三大缓存问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三大缓存问题"}},[e._v("#")]),e._v(" 三大缓存问题")]),e._v(" "),v("p",[e._v("**注意：**这部分内容作为选学内容。")]),e._v(" "),v("p",[e._v("虽然我们可以利用缓存来大幅度提升我们程序的数据获取效率，但是使用缓存也存在着一些潜在的问题。")]),e._v(" "),v("h3",{attrs:{id:"缓存穿透"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[e._v("#")]),e._v(" 缓存穿透")]),e._v(" "),v("p",[e._v("当我们去查询一个一定不存在的数据，比如Mybatis在缓存是未命中的情况下需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。")]),e._v(" "),v("p",[e._v("这显然是很浪费资源的，我们希望的是，如果这个数据不存在，为什么缓存这一层不直接返回空呢，这时就不必再去查数据库了，但是也有一个问题，缓存不去查数据库怎么知道数据库里面到底有没有这个数据呢？")]),e._v(" "),v("p",[e._v("这时我们就可以使用布隆过滤器来进行判断。什么是布隆过滤器？（当然不是打辅助的那个布隆，只不过也挺像，辅助布隆也是挡子弹的）")]),e._v(" "),v("p",[e._v("使用布隆过滤器，能够告诉你某样东西一定不存在或是某样东西可能存在。")]),e._v(" "),v("p",[e._v("布隆过滤器本质是一个存放二进制位的bit数组，如果我们要添加一个值到布隆过滤器中，我们需要使用N个不同的哈希函数来生成N个哈希值，并对每个生成的哈希值指向的bit位置1，如上图所示，一共添加了三个值abc。")]),e._v(" "),v("p",[e._v("接着我们给一个d，那么这时就可以进行判断，如果说d计算的N个哈希值的位置上都是1，那么就说明d可能存在；这时候又来了个e，计算后我们发现有一个位置上的值是0，这时就可以直接断定e一定不存在。")]),e._v(" "),v("h3",{attrs:{id:"缓存击穿"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[e._v("#")]),e._v(" 缓存击穿")]),e._v(" "),v("p",[e._v("某个 Key 属于热点数据，访问非常频繁，同一时间很多人都在访问，在这个Key失效的瞬间，大量的请求到来，这时发现缓存中没有数据，就全都直接请求数据库，相当于击穿了缓存屏障，直接攻击整个系统核心。")]),e._v(" "),v("p",[e._v("这种情况下，最好的解决办法就是不让Key那么快过期，如果一个Key处于高频访问，那么可以适当地延长过期时间。")]),e._v(" "),v("h3",{attrs:{id:"缓存雪崩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[e._v("#")]),e._v(" 缓存雪崩")]),e._v(" "),v("p",[e._v("当你的Redis服务器炸了或是大量的Key在同一时间过期，这时相当于缓存直接GG了，那么如果这时又有很多的请求来访问不同的数据，同一时间内缓存服务器就得向数据库大量发起请求来重新建立缓存，很容易把数据库也搞GG。")]),e._v(" "),v("p",[e._v("解决这种问题最好的办法就是设置高可用，也就是搭建Redis集群，当然也可以采取一些服务熔断降级机制，这些内容我们会在SpringCloud阶段再进行探讨。")])],1)}),[],!1,null,null,null);v.default=t.exports}}]);